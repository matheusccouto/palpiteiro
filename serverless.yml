service: palpiteiro
frameworkVersion: "3"
params:
  main:
    cartola-bucket: cartola-main
    fivethirtyeight-bucket: fivethirtyeight-main
    deployment-bucket: palpiteiro-main
  dev:
    cartola-bucket: cartola-dev
    fivethirtyeight-bucket: fivethirtyeight-dev
    deployment-bucket: palpiteiro-dev
provider:
  name: aws
  stage: ${opt:stage}
  deploymentBucket:
    name: ${param:deployment-bucket}
package:
  individually: true
  patterns:
    - "!**/*"
    - "utils/**/*.py"
functions:
  draft:
    handler: lambda_draft.handler
    description: Line up drafting for fantasy soccer.
    runtime: python3.9
    timeout: 5 # seconds
    memorySize: 2048 # megabytes
    package:
      patterns:
        - "lambda_draft/**/*.py"
        - "!lambda_draft/tests/**/*"
        - "!lambda_draft/notebooks/**/*"
  forecast:
    handler: lambda_forecast.handler
    description: Player forecasting for fantasy soccer.
    runtime: python3.9
    package:
      patterns:
        - "lambda_forecast/**/*.py"
        - "!lambda_forecast/tests/**/*"
        - "!lambda_forecast/data/**/*"
  extract-cartola-players:
    handler: lambda_extract_cartola_players.handler
    description: Extract players data from Cartola FC to JSON.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_extract_cartola_players/*.py"
    environment:
      BUCKET: ${param:cartola-bucket}
  extract-cartola-scouts:
    handler: lambda_extract_cartola_scouts.handler
    description: Extract scouts data from Cartola FC to JSON.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_extract_cartola_scouts/*.py"
    environment:
      BUCKET: ${param:cartola-bucket}
  transform-cartola-players:
    handler: lambda_transform_cartola_players.handler
    description: Transform players data from Cartola FC from JSON to CSV.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_transform_cartola_players/*.py"
    layers:
      - { Ref: PandasLambdaLayer }
  transform-cartola-scouts:
    handler: lambda_transform_cartola_scouts.handler
    description: Transform scouts data from Cartola FC from JSON to CSV.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_transform_cartola_scouts/*.py"
    layers:
      - { Ref: PandasLambdaLayer }
  extract-cartola-matches:
    handler: lambda_extract_cartola_matches.handler
    description: Extract matches data from Cartola FC to JSON.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_extract_cartola_matches/*.py"
    environment:
      BUCKET: ${param:cartola-bucket}
  transform-cartola-matches:
    handler: lambda_transform_cartola_matches.handler
    description: Transform matches data from Cartola FC from JSON to CSV.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_transform_cartola_matches/*.py"
    layers:
      - { Ref: PandasLambdaLayer }
  extract-fivethirtyeight-spi:
    handler: lambda_extract_fivethirtyeight_spi.handler
    description: Extract matches data from FiveThirtyEight SPI to CSV.
    runtime: python3.9
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_extract_fivethirtyeight_spi/*.py"
    layers:
      - { Ref: PandasLambdaLayer }
    environment:
      BUCKET: ${param:fivethirtyeight-bucket}
  load:
    handler: lambda_load.handler
    description: Load CSV into the database.
    runtime: python3.9
    timeout: 900
    role:
      { "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/palpiteiro-scraper" }
    package:
      patterns:
        - "lambda_load/*.py"
    layers:
      - { Ref: BigqueryLambdaLayer }
    environment:
      GCP_SERVICE_ACCOUNT_TYPE: service_account
      GCP_SERVICE_ACCOUNT_PROJECT_ID: ${env:GCP_SERVICE_ACCOUNT_PROJECT_ID}
      GCP_SERVICE_ACCOUNT_PRIVATE_KEY_ID: ${env:GCP_SERVICE_ACCOUNT_PRIVATE_KEY_ID}
      GCP_SERVICE_ACCOUNT_PRIVATE_KEY: ${env:GCP_SERVICE_ACCOUNT_PRIVATE_KEY}
      GCP_SERVICE_ACCOUNT_CLIENT_EMAIL: ${env:GCP_SERVICE_ACCOUNT_CLIENT_EMAIL}
      GCP_SERVICE_ACCOUNT_CLIENT_ID: ${env:GCP_SERVICE_ACCOUNT_CLIENT_ID}
      GCP_SERVICE_ACCOUNT_AUTH_URI: https://accounts.google.com/o/oauth2/auth
      GCP_SERVICE_ACCOUNT_TOKEN_URI: https://oauth2.googleapis.com/token
      GCP_SERVICE_ACCOUNT_AUTH_PROVIDER_X509_CERT_URL: https://www.googleapis.com/oauth2/v1/certs
      GCP_SERVICE_ACCOUNT_CLIENT_X509_CERT_URL: ${env:GCP_SERVICE_ACCOUNT_CLIENT_X509_CERT_URL}
layers:
  bigquery:
    package:
      artifact: layer_bigquery.zip
  pandas:
    package:
      artifact: layer_pandas.zip
  # sklearn:
  #   package:
  #     artifact: layer_sklearn.zip
stepFunctions:
  stateMachines:
    extract-cartola-players-stepfunc:
      name: extract_cartola_players-${opt:stage}
      events:
        - schedule: rate(8 hours)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsTimedOut
          - executionsFailed
          - executionsAborted
          - executionThrottled
      definition:
        StartAt: ExtractCartolaPlayers
        States:
          ExtractCartolaPlayers:
            Type: Task
            Resource:
              Fn::GetAtt: [extract-cartola-players, Arn]
            Next: TransformCartolaPlayers
          TransformCartolaPlayers:
            Type: Task
            Resource:
              Fn::GetAtt: [transform-cartola-players, Arn]
            Next: Load
            ResultSelector:
              uri.$: "$.uri"
              table: atletas
              schema: cartola
              subset:
                - temporada_id
                - rodada_id
                - atleta_id
          Load:
            Type: Task
            Resource:
              Fn::GetAtt: [load, Arn]
            End: true
    extract-cartola-scouts-stepfunc:
      name: extract_cartola_scouts-${opt:stage}
      events:
        - schedule: rate(8 hours)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsTimedOut
          - executionsFailed
          - executionsAborted
          - executionThrottled
      definition:
        StartAt: ExtractCartolaScouts
        States:
          ExtractCartolaScouts:
            Type: Task
            Resource:
              Fn::GetAtt: [extract-cartola-scouts, Arn]
            Next: TransformCartolaScouts
          TransformCartolaScouts:
            Type: Task
            Resource:
              Fn::GetAtt: [transform-cartola-scouts, Arn]
            Next: Load
            ResultSelector:
              uri.$: "$.uri"
              table: pontuados
              schema: cartola
              subset:
                - temporada
                - rodada
                - id
          Load:
            Type: Task
            Resource:
              Fn::GetAtt: [load, Arn]
            End: true
    extract-cartola-matches-stepfunc:
      name: extract_cartola_matches-${opt:stage}
      events:
        - schedule: rate(8 hours)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsTimedOut
          - executionsFailed
          - executionsAborted
          - executionThrottled
      definition:
        StartAt: ExtractCartolaMatches
        States:
          ExtractCartolaMatches:
            Type: Task
            Resource:
              Fn::GetAtt: [extract-cartola-matches, Arn]
            Next: TransformCartolaMatches
          TransformCartolaMatches:
            Type: Task
            Resource:
              Fn::GetAtt: [transform-cartola-matches, Arn]
            Next: Load
            ResultSelector:
              uri.$: "$.uri"
              table: partidas
              schema: cartola
              subset:
                - partida_id
          Load:
            Type: Task
            Resource:
              Fn::GetAtt: [load, Arn]
            End: true
    extract-fivethirtyeight-spi-stepfunc:
      name: extract_fivethirtyeight_spi-${opt:stage}
      events:
        - schedule: rate(8 hours)
      alarms:
        topics:
          alarm: { Ref: SNSTopic }
        metrics:
          - executionsTimedOut
          - executionsFailed
          - executionsAborted
          - executionThrottled
      definition:
        StartAt: ExtractFiveThirtyEightSPI
        States:
          ExtractFiveThirtyEightSPI:
            Type: Task
            Resource:
              Fn::GetAtt: [extract-fivethirtyeight-spi, Arn]
            Next: Load
            ResultSelector:
              uri.$: "$.uri"
              table: spi
              schema: fivethirtyeight
              subset:
                - season
                - league_id
                - team1
                - team2
          Load:
            Type: Task
            Resource:
              Fn::GetAtt: [load, Arn]
            End: true
resources:
  Resources:
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${opt:stage}
        Subscription:
          - Protocol: email
            Endpoint: matheusccouto@gmail.com
plugins:
  - serverless-step-functions
